module Prepd
  class Client < ActiveRecord::Base
    attr_accessor :data_dir
    has_many :projects, dependent: :destroy
    has_many :applications, through: :projects

    before_validation :set_defaults
    validates :name, :path, presence: true

    after_create :setup
    after_destroy :destroy_client

    def set_defaults
      self.path = "#{Prepd.options['DATA_DIR']}/#{name}"
    end

    def setup
      FileUtils.mkdir_p(path)
    end

    def destroy_client
      FileUtils.rm_rf("#{path}")
    end
  end


  class Project < ActiveRecord::Base
    attr_accessor :mode
    attr_accessor :tf_creds, :tf_key, :tf_secret, :ansible_creds, :ansible_key, :ansible_secret
    belongs_to :client, required: true
    has_many :applications, dependent: :destroy

    validates :name, presence: true, uniqueness: { scope: :client }

    after_create :create_project
    after_destroy :destroy_project

    #
    # Checkout the prepd-project files and remove the origin
    #
    def create_project
      Dir.chdir(client.path) { system("git clone git@github.com:rjayroach/prepd-project.git #{name}") }
      Dir.chdir(path) do
        # Remove the git history and start with a clean repository
        unless mode.eql?('dev')
          FileUtils.rm_rf("#{path}/.git")
          system('git init')
          system("git remote add origin #{repo_url}") unless repo_url.nil?
        end
        if File.exists?("#{Prepd.work_dir}/developer.yml")
          FileUtils.cp("#{Prepd.work_dir}/developer.yml", '.developer.yml')
        elsif File.exists?("#{Dir.home}/.prepd-developer.yml")
          FileUtils.cp("#{Dir.home}/.prepd-developer.yml", '.developer.yml')
        else
          File.open('.developer.yml', 'w') do |f|
            f.puts('---')
            f.puts("git_username: #{`git config --get user.name`.chomp}")
            f.puts("git_email: #{`git config --get user.email`.chomp}")
          end
        end
        require 'securerandom'
        require 'csv'
        File.open('.vault-password.txt', 'w') { |f| f.puts(SecureRandom.uuid) }
        self.tf_key, self.tf_secret = CSV.read(tf_creds).last.slice(2,2) if tf_creds
        if tf_key && tf_secret
          File.open('.terraform-vars.txt', 'w') { |f|
            f.puts("aws_access_key_id = \"#{tf_key}\"")
            f.puts("aws_secret_access_key = \"#{tf_secret}\"")
          }
        end
        self.ansible_creds = '/Users/rjayroach/Documents/c2p4/aws/legos-ansible.csv'
        self.ansible_key, self.ansible_secret = CSV.read(ansible_creds).last.slice(2,2) if ansible_creds
        if ansible_key && ansible_secret
          File.open('.boto', 'w') { |f|
            f.puts('[Credentials]')
            f.puts("aws_access_key_id = #{ansible_key}")
            f.puts("aws_secret_access_key = #{ansible_secret}")
          }
        end
        # generate a key pair to be used as the EC2 key pair
        system("ssh-keygen -b 2048 -t rsa -f .id_rsa -q -N '' -C 'Key Pair for EC2 (generated by prepd)'")
      end
      Dir.chdir("#{path}/ansible") do
        %w(all development local production staging).each do |env|
          system("ansible-vault encrypt inventory/group_vars/#{env}/vault")
        end
        system('git submodule add git@github.com:rjayroach/ansible-roles.git roles')
      end
    end

    # NOTE: The remote project repository will *not* be destroyed
    def destroy_project
      Dir.chdir(path) do
        system('vagrant destroy')
      end
      # TODO: If user chooses not to destroy, then don't rm_rf
      FileUtils.rm_rf(path)
    end

    def path
     "#{client.path}/#{name}"
    end
  end


  class Application < ActiveRecord::Base
    belongs_to :project, required: true

    validates :name, presence: true, uniqueness: { scope: :project }

    after_create :setup

    def setup
      Dir.chdir("#{project.path}/ansible") do
        FileUtils.cp_r('application', name)
      end
    end

    def path
     "#{project.path}/ansible/#{name}"
    end
  end
end
