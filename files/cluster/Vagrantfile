# Mount the host_directory => VM directory
# NOTE: NFS exports cannot be nested; If there is an error, make sure that the attempted mounts here
# are not subdirectories of an already NFS mounted directory in the directory tree
mount_paths = {
  "#{Pathname.new(Dir.pwd).parent.parent.parent}" => '/home/vagrant/prepd',
  "#{Dir.home}/.prepd/share" => '/usr/share/prepd',
  "#{Dir.home}/.ansible/roles" => '/usr/share/ansible/roles'
}

# The virtual machine's interface to connect to via ssh
ssh_intf = 'eth1'

# The number of machines in the cluster (in addition to node0)
cluster_node_count = 3

# The ports to open between the VM and the host
port_forwards = [
  2375,  # docker
  2376,  # docker
  3000,  # rails
  4200,  # ember
  7357,
  # 35729, # reload
  49152  # livereload
]

if %w(up provision).include?(ARGV[0]); end

Vagrant.configure(2) do |config|
  subdomain, x, y, domain = Dir.pwd.split('/').reverse[0..3]
  tld = 'local'

  config.vm.box = 'debian/contrib-stretch64'
  config.vm.box_check_update = false

  # Add user's ssh key to vagrant vm
  config.vm.provision :shell do |shell|
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    shell.inline = <<-SHELL
      echo '' >> /home/vagrant/.ssh/authorized_keys
      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    SHELL
  end

  # TODO: These packages will be installed by ansible after the machine has booted
  #    gem install prepd

  # Add OS and pip packages for Ansible
  config.vm.provision :shell do |shell|
    shell.inline = <<-SHELL
      echo "Installing Ansible..."
      apt-get update
      apt-get install -y apt-transport-https libssl-dev libffi-dev python-dev build-essential python-setuptools git
      easy_install pip
      pip install -U setuptools cryptography markupsafe
      pip install -U ansible boto
      echo "Installing Ruby..."
      apt-get install -y ruby ruby-dev sqlite3 libsqlite3-dev ruby-bundler
    SHELL
  end

  config.ssh.forward_agent = true

  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 1
    v.customize ['guestproperty', 'set', :id, '/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold', 10000 ]
    v.customize ['modifyvm', :id, '--nictype1', 'virtio']
  end

  if Vagrant.has_plugin?('vagrant-hostmanager')
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
  end

  (0..(cluster_node_count + 1)).each do |i|
    autostart = forward_ports = i.eql?(0)
    config.vm.define "node#{i}", autostart: autostart do |node|
      node.vm.provider :virtualbox do |v|
        v.name = "node#{i}.#{subdomain}.#{domain}.#{tld}"
      end

      # NFS directory mounts
      node.vm.synced_folder '.', '/vagrant', disabled: true
      mount_paths.each do |host_path, machine_path|
        node.vm.synced_folder host_path, machine_path, type: 'nfs',
          mount_options: ['rw', 'vers=3', 'tcp'],
          linux__nfs_options: ['rw', 'no_subtree_check', 'all_squash', 'async']
      end

      # Networking
      node.vm.hostname = "node#{i}.#{subdomain}.#{domain}.#{tld}"
      node.vm.network 'private_network', type: :dhcp, nic_type: 'virtio'

      if Vagrant.has_plugin?('vagrant-hostmanager')
        # node.hostmanager.aliases = ["node#{i}.local"]
        node.hostmanager.ip_resolver = proc do |vm, resolving_vm|
          if hostname = (vm.ssh_info && vm.ssh_info[:host])
            `vagrant ssh node#{i} -c "/sbin/ip addr show #{ssh_intf} | grep 'inet '"`.split[1].split('/')[0]
          end
        end
      end

      port_forwards.each do |port|
        node.vm.network 'forwarded_port', guest: port, host: port, auto_correct: true
      end if forward_ports
    end
  end

  if Vagrant.has_plugin?('vagrant-cachier')
    config.cache.scope = :box
    config.cache.auto_detect = false
    config.cache.enable :apt
    config.cache.synced_folder_opts = {
      owner: '_apt',
      group: '_apt'
    }
  end
end
